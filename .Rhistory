tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:10),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
library(tidyverse)
install.packages('tidyverse')
library(tidyverse)
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:10),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
View(dat2)
dat2 <- x %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:10),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:10),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
nameY=c('dDMN','Hypothalamus','MidBrain','OFC','Amygdala','Salience','SubcortThreat')
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(nameY, levels=1:10),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(nameY, levels=1:7),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(nameY, levels=1:49),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(nameY),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(nameY, levels=1),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:10),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
ggplot(dat2, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient(low = "white", high = "red")
library(gplots)
heatmap.2(x,dendrogram = "none")
heatmap.2(y,dendrogram = "none")
heatmap.2(y,dendrogram = "none", Rowv = FALSE, Colv = FALSE)
heatmap.2(y,dendrogram = "none", Rowv = FALSE, Colv = FALSE, cellnote = y)
heatmap.2(y,dendrogram = "none", Rowv = FALSE, Colv = FALSE, cellnote = y, notecol = "black")
z = round(y,3)
View(z)
heatmap.2(z,dendrogram = "none", Rowv = FALSE, Colv = FALSE, cellnote = y, notecol = "black", trace = 'none')
heatmap.2(z,dendrogram = "none", Rowv = FALSE, Colv = FALSE, cellnote = z, notecol = "black", trace = 'none')
heatmap.2(z,dendrogram = "none", Rowv = FALSE, Colv = FALSE, cellnote = z, notecol = "black", trace = 'none', key = F)
heatmap.2(z,dendrogram = "none", Rowv = FALSE, Colv = FALSE, cellnote = z, notecol = "black", trace = 'none')
heatmap.2(z,dendrogram = "none", Rowv = FALSE, Colv = FALSE, cellnote = z, notecol = "black", trace = 'none', density.info = 'none')
install.packages('circlize')
set.seed(999)
mat = matrix(sample(18, 18), 3, 6)
rownames(mat) = paste0("S", 1:3)
colnames(mat) = paste0("E", 1:6)
chordDiagram(mat)
library(circlize)
chordDiagram(mat)
x = read.delim(pipe("pbpaste"))
y = as.matrix(x)
x = read.delim(pipe("pbpaste"))
y = as.matrix(x)
EEGNames = (  'Fp1' 'AF7' 'AF3' 'F1')
EEGNames = ('Fp1' 'AF7' 'AF3' 'F1')
EEGNames = ('Fp1','AF7','AF3','F1')
EEGNames = c('Fp1' 'AF7' 'AF3' 'F1')
EEGNames = c('Fp1','AF7','AF3','F1')
x = read.delim(pipe("pbpaste"))
y = as.matrix(x)
View(y)
View(x)
x = read.delim(pipe("pbpaste"),header=FALSE)
y = as.matrix(x)
EEGNames = c('Fp1','AF7','AF3','F1','F3','F5','F7','FT7','FC5','FC3','FC1','C1',
'C3','C5','T7','TP7','CP5','CP3','CP1','P1','P3','P5','P7','P9','PO7',
'PO3','O1','Iz','Oz','POz','Pz','CPz','Fpz','Fp2','AF8','AF4','AFz','Fz',
'F2','F4','F6','F8','FT8','FC6','FC4','FC2','FCz','Cz','C2','C4','C6',
'T8','TP8','CP6','CP4','CP2','P2','P4','P6','P8','P10','PO8','PO4','O2')
chordDiagram(x)
rownames(x) = EEGNames
colnames(x) = EEGNames
View(x)
x = as.matrix(x)
rownames(x) = EEGNames
colnames(x) = EEGNames
chordDiagram(x)
chordDiagram(x, col = x)
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
posx = read.delim(pipe("pbpaste"),header=FALSE)
posx = as.matrix(posx)
chordDiagram(adj, col = posx)
View(posx)
posx = read.delim(pipe("pbpaste"),header=FALSE)
posx = as.matrix(posx)
rownames(adj) = EEGNames
colnames(adj) = EEGNames
chordDiagram(adj, col = posx)
col_mat = rand_color(length(adj), transparency = 0.5)
head(col_mat)
chordDiagram(adj, col = col_mat)
col_mat = rand_color(length(posx), transparency = 0.5)
chordDiagram(adj, col = col_mat)
library(circlize)
?colorRamp2
col_fun = colorRamp2(c(-1, 0, 1), c("green", "black", "red"))
col_fun(seq(-2, 2, by = 0.5))
View(col_fun)
col_fun = colorRamp2(c(log10(0.0001), log10(0.05), log10(1)), c("green", "white", "red"))
col_fun(log10(c(0.000001, 0.0012, 0.012, 0.2)))
space = c("RGB", "HSV", "LAB", "XYZ", "sRGB", "LUV")
par(xpd = NA)
plot(NULL, xlim = c(-1, 1), ylim = c(0, length(space)+1), type = "n")
for(i in seq_along(space)) {
f = colorRamp2(c(-1, 0, 1), c("green", "black", "red"), space = space[i])
x = seq(-1, 1, length = 200)
rect(x-1/200, i-0.5, x+1/200, i+0.5, col = f(x), border = NA)
text(1, i, space[i], adj = c(-0.2, 0.5))
}
par(xpd = FALSE)
?chordDiagram
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
col_mat = colorRamp2(adj)
library(circlize)
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
?colorRamp2
col_mat = colorRamp2([1:10],adj,transparency = 0,space="LAB")
col_mat = colorRamp2(1:10,adj,transparency = 0,space="LAB")
col_mat = colorRamp2(adj,adj,transparency = 0,space="LAB")
View(col_mat)
View(col_mat)
col_mat = colorRamp2(1:10,1:10,transparency = 0,space="LAB")
col_fun = colorRamp2(1:10,1:10,transparency = 0,space="LAB")
col_mat = col_fun(adj)
View(adj)
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
col_mat = col_fun(adj)
chordDiagram(adj,col = col_mat)
EEGNames = c('Fp1','AF7','AF3','F1','F3','F5','F7','FT7','FC5','FC3','FC1','C1',
'C3','C5','T7','TP7','CP5','CP3','CP1','P1','P3','P5','P7','P9','PO7',
'PO3','O1','Iz','Oz','POz','Pz','CPz','Fpz','Fp2','AF8','AF4','AFz','Fz',
'F2','F4','F6','F8','FT8','FC6','FC4','FC2','FCz','Cz','C2','C4','C6',
'T8','TP8','CP6','CP4','CP2','P2','P4','P6','P8','P10','PO8','PO4','O2')
rownames(adj) = EEGNames
colnames(adj) = EEGNames
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
rownames(adj) = EEGNames
colnames(adj) = EEGNames
col_mat = col_fun(adj)
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
EEGNames = c('Fp1','AF7','AF3','F1','F3','F5','F7','FT7','FC5','FC3','FC1','C1',
'C3','C5','T7','TP7','CP5','CP3','CP1','P1','P3','P5','P7','P9','PO7',
'PO3','O1','Iz','Oz','POz','Pz','CPz','Fpz','Fp2','AF8','AF4','AFz','Fz',
'F2','F4','F6','F8','FT8','FC6','FC4','FC2','FCz','Cz','C2','C4','C6',
'T8','TP8','CP6','CP4','CP2','P2','P4','P6','P8','P10','PO8','PO4','O2')
rownames(adj) = EEGNames
colnames(adj) = EEGNames
col_mat = col_fun(adj)
chordDiagram(adj,col = col_mat, symmetric = TRUE)
chordDiagram(adj,col = col_mat)
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
rownames(adj) = EEGNames
colnames(adj) = EEGNames
col_fun = colorRamp2(1:10,1:10,transparency = 0,space="LAB")
col_mat = col_fun(adj)
chordDiagram(adj, col = col_mat)
chordDiagram(adj,col = col_mat, symmetric = TRUE)
View(col_mat)
View(col_mat)
0:1:10
0:0.1:1
0:1:0.1
break = seq(from = 0, to = 1, by = 0.01)
breaks = seq(from = 0, to = 1, by = 0.01)
col_fun = colorRamp2(breaks,breaks,transparency = 0,space="LAB")
breaks = seq(from = 0.1, to = 1, by = 0.01)
col_fun = colorRamp2(breaks,breaks,transparency = 0,space="LAB")
col_mat = col_fun(adj)
View(col_mat)
View(col_mat)
View(adj)
col_fun = colorRamp2(breaks,breaks,transparency = 0,space="LAB")
col_fun = colorRamp2(c(-1, 0, 1), c("green", "black", "red"))
col_mat = col_fun(adj)
View(col_mat)
chordDiagram(adj, col = col_mat, symmetric = TRUE)
library(circlize)
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
adj = read.delim(pipe("pbpaste"),header=FALSE)
library(circlize)
cor_mat = read.delim(pipe("pbpaste"),header=FALSE)
cor_mat = as.matrix(cor_mat)
EEGNames = c('Fp1','AF7','AF3','F1','F3','F5','F7','FT7','FC5','FC3','FC1','C1',
'C3','C5','T7','TP7','CP5','CP3','CP1','P1','P3','P5','P7','P9','PO7',
'PO3','O1','Iz','Oz','POz','Pz','CPz','Fpz','Fp2','AF8','AF4','AFz','Fz',
'F2','F4','F6','F8','FT8','FC6','FC4','FC2','FCz','Cz','C2','C4','C6',
'T8','TP8','CP6','CP4','CP2','P2','P4','P6','P8','P10','PO8','PO4','O2')
rownames(cor_mat) = EEGNames
colnames(cor_mat) = EEGNames
col_fun = colorRamp2(c(-1, 0, 1), c("darkgreen", "white", "red"))
chordDiagram(cor_mat, col = col_fun(cor_mat), symmetric = TRUE)
col_mat = col_fun(cor_mat)
col_mat[abs(cor_mat) < 0.2] = "#00000000"
chordDiagram(cor_mat, col = col_mat, symmetric = TRUE)
col_mat = col_fun(cor_mat)
col_mat[abs(cor_mat) < 0.4] = "#00000000"
chordDiagram(cor_mat, col = col_mat, symmetric = TRUE)
col_mat = col_fun(cor_mat)
col_mat[abs(cor_mat) < 0.4] = "#00000000"
chordDiagram(cor_mat, col = col_mat, symmetric = TRUE)
View(cor_mat)
col_mat = col_fun(cor_mat)
col_mat[abs(cor_mat) < 0.5] = "#00000000"
chordDiagram(cor_mat, col = col_mat, symmetric = TRUE)
install.packages('brainGraph')
library('brainGraph')
install.packages('RGtk2')
data("dk")
install.packages('brainGraph')
install.packages('RGtk2')
install.packages("RGtk2", depen=T, type="source")
install.packages("RGtk2", depen=T, type="source")
setRepositories()
install.packages("rticles", type = "source")
library(rticles)
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
library(igraph)
measures = read.csv("./Input/Measures.csv")
measures
library(gplots)
library(ggplot2)
library(corrplot)
install.packages("bootnet")
install.packages("qgraph")
install.packages("lavaan")
library(bootnet)
library(bootnet)
library(qgraph)
help("bootnet")
library(bootnet)
library(qgraph)
library(bootnet)
library(qgraph)
install.packages("skimr")
devtools::install_github("hadley/colformat")
devtools::install_github("ropenscilabs/skimr")
load("~/Dropbox/Research/Ideas/Symptomics/_old_sfari.RData")
library(skimr)
skim(df)
a <- skim(df)
View(a)
library(lavaan)
install.packages(easypackages)
library(easypackages) # then we can do the rest in one go
install.packages('easypackages')
install.packages("easypackages")
library(easypackages) # then we can do the rest in one go
list.of.packages <- c("Hmisc","ggplot2","gplots","ggthemes","viridis","reshape2")
libraries(list.of.packages)
list.of.packages <- c("Hmisc","ggplot2","gplots","ggthemes","viridis","reshape2")
installed.packages()[,"Package"]
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
length(new.packages)
install.packages('proxy')
install.packages("installr")
library(pwr)
install.packages("pwr")
library(igraph)
df <- read.table(file = "~/Downloads/facebook_combined.txt",header = FALSE)
df <- df+1
gdf <- graph_from_edgelist(as.matrix(df))
deg <- degree(gdf)
sum(deg>200)
gdf2 <- delete.vertices(gdf,which(degree(gdf)<200))
wc <- cluster_walktrap(gdf2)
members <- membership(wc)
library(networkD3)
d3 <- igraph_to_networkD3(gdf2, group = members)
forceNetwork(Links = d3$links, Nodes = d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group')
forceNetwork(Links = d3$links, Nodes = d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group',
zoom = TRUE)
library(magrittr)
simpleNetwork(d3)
forceNetwork(Links = d3$links, Nodes = d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group',
zoom = TRUE) %>%
saveNetwork(file = 'Net1.html')
load("~/Dropbox/Research/Projects/Macaque/Data/nhp_PrePost_StartingData.RData")
View(samplePrePost)
unique(samplePrePost$age)
unique(samplePrePost$age_log2pcd)
View(probes)
setwd("~/Dropbox/Research/Projects/MSN_ABIDE/Public/Normative_modeling")
load("./Output_500aparc/CT_Age_IQ_Match/W/CommonPheno_Wscores.RData")
columnnames2 <- as.factor(paste(networkDataNames$V1,"_z",sep=""))
combinedData.M <- subset(combinedData, SEX == "Male")
combinedData.M.ASD <- subset(combinedData.M, DX_GROUP == "Autism")
list.of.packages <- c("Hmisc","ggplot2","caret","gplots","Rmisc","dplyr",
"MatchIt","optmatch","data.table","plotrix","ggthemes",
"viridis","coin","plyr","psytabs","RColorBrewer",
"msir","lmtest", "ggpubr","stats", "reshape2","xtable",
"ez","apa","parallel", "jmuOutlier","Rtsne","fpc", "cluster",
"RCurl","nlme")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)>0) { install.packages(new.packages)}
libraries(list.of.packages)
library(easypackages)
libraries(list.of.packages)
## LME test on w-scores
df <- melt(combinedData.M.ASD, id.vars=c("DX_GROUP","SEX","SUB_ID","SITE_ID","AGE_AT_SCAN"), measure.vars = columnnames2)
View(df)
Fv <- data.frame(Intercept=double(),
Dx=double(),
Sx=double(),
Age=double(),
stringsAsFactors=FALSE)
Pv <- Fv
DFv <- Fv
CohensD <- matrix(NA,nrow = 308, ncol = 1)
View(df)
i = 'lh_bankssts_part1_z'
df2 <- subset(df, variable == i)
View(df2)
df3 <- df2[abs(df$value)>2]
df3 <- df2[abs(df2$value) > 2]
abs(df2$value) > 2
removeS <- df2[abs(df2$value) > 2,]
View(removeS)
removeS <- df2[abs(df2$value) < 2,]
df2 <- df2[abs(df2$value) < 2,]
View(df2)
m <- lme(fixed=value ~ 1,
random = ~ 1|SITE_ID, data = df2,
control=lmeControl(singular.ok=TRUE,returnObject=TRUE))
View(m)
anova(m)
a <- anova(m)
a$`F-value`
a$`p-value`
a$denDF
for (i in unique(df$variable)){
df2 <- subset(df, variable == i)
df2 <- df2[abs(df2$value) < 2,]
m <- lme(fixed=value ~ 1,
random = ~ 1|SITE_ID, data = df2,
control=lmeControl(singular.ok=TRUE,returnObject=TRUE))
a <- anova(m)
Fv <- rbind(Fv,a$`F-value`)
Pv <- rbind(Pv,a$`p-value`)
DFv <- rbind(DFv,a$denDF)
CohensD <- rbind(CohensD,(mean(df2$value)/sd(df2$value)))
}
View(Pv)
Pv < 0.05
sum(Pv < 0.05)
for (i in unique(df$variable)){
df2 <- subset(df, variable == i)
df2 <- df2[abs(df2$value) < 2,]
m <- lme(fixed=value ~ 0,
random = ~ 1|SITE_ID, data = df2,
control=lmeControl(singular.ok=TRUE,returnObject=TRUE))
a <- anova(m)
Fv <- rbind(Fv,a$`F-value`)
Pv <- rbind(Pv,a$`p-value`)
DFv <- rbind(DFv,a$denDF)
CohensD <- rbind(CohensD,(mean(df2$value)/sd(df2$value)))
}
View(Pv)
View(Fv)
for (i in unique(df$variable)){
df2 <- subset(df, variable == i)
df2 <- df2[abs(df2$value) =< 2,]
m <- lme(fixed=value ~ 1,
random = ~ 1|SITE_ID, data = df2,
control=lmeControl(singular.ok=TRUE,returnObject=TRUE))
a <- anova(m)
Fv <- rbind(Fv,a$`F-value`)
Pv <- rbind(Pv,a$`p-value`)
DFv <- rbind(DFv,a$denDF)
CohensD <- rbind(CohensD,(mean(df2$value)/sd(df2$value)))
}
for (i in unique(df$variable)){
df2 <- subset(df, variable == i)
df2 <- df2[abs(df2$value) <= 2,]
m <- lme(fixed=value ~ 1,
random = ~ 1|SITE_ID, data = df2,
control=lmeControl(singular.ok=TRUE,returnObject=TRUE))
a <- anova(m)
Fv <- rbind(Fv,a$`F-value`)
Pv <- rbind(Pv,a$`p-value`)
DFv <- rbind(DFv,a$denDF)
CohensD <- rbind(CohensD,(mean(df2$value)/sd(df2$value)))
}
View(df2)
for (i in unique(df$variable)){
df2 <- subset(df, variable == i)
df2 <- df2[abs(df2$value) <= 2,]
m <- lme(fixed=value ~ 1, data = df2,
control=lmeControl(singular.ok=TRUE,returnObject=TRUE))
a <- anova(m)
Fv <- rbind(Fv,a$`F-value`)
Pv <- rbind(Pv,a$`p-value`)
DFv <- rbind(DFv,a$denDF)
CohensD <- rbind(CohensD,(mean(df2$value)/sd(df2$value)))
}
m <- lme(fixed=value ~ 1,
random = ~ 1|SITE_ID, data = df2,
control=lmeControl(singular.ok=TRUE,returnObject=TRUE))
View(df2)
m <- lme(fixed=value ~ DX_GROUP,
random = ~ 1|SITE_ID, data = df2,
control=lmeControl(singular.ok=TRUE,returnObject=TRUE))
## LME test on w-scores
df <- melt(combinedData, id.vars=c("DX_GROUP","SEX","SUB_ID","SITE_ID","AGE_AT_SCAN"), measure.vars = columnnames2)
Fv <- data.frame(Intercept=double(),
Dx=double(),
Sx=double(),
Age=double(),
stringsAsFactors=FALSE)
Pv <- Fv
DFv <- Fv
CohensD <- matrix(NA,nrow = 308, ncol = 1)
df2 <- subset(df, variable == i)
df2 <- df2[abs(df2$value) <= 2,]
m <- lme(fixed=value ~ 1,
random = ~ 1|SITE_ID, data = df2,
control=lmeControl(singular.ok=TRUE,returnObject=TRUE))
anova(m)
m <- lme(fixed=value ~ DX_GROUP,
random = ~ 1|SITE_ID, data = df2,
control=lmeControl(singular.ok=TRUE,returnObject=TRUE))
anova(m)
for (i in unique(df$variable)){
df2 <- subset(df, variable == i)
df2 <- df2[abs(df2$value) <= 2,]
m <- lme(fixed=value ~ DX_GROUP,
random = ~ 1|SITE_ID, data = df2,
control=lmeControl(singular.ok=TRUE,returnObject=TRUE))
a <- anova(m)
Fv <- rbind(Fv,a$`F-value`)
Pv <- rbind(Pv,a$`p-value`)
DFv <- rbind(DFv,a$denDF)
#CohensD <- rbind(CohensD,(mean(df2$value)/sd(df2$value)))
}
View(Pv)
adjustedP2 <- p.adjust(Pv[,2], method = "fdr")
sum(adjustedP2 < 0.05)
View(df)
