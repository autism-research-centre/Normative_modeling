download.file("http://simonsoftware.se/other/xkcd.ttf", dest="~/Library/Fonts/xkcd.ttf", mode="wb")
download.file("http://dl.dropbox.com/u/12305244/Humor-Sans.ttf", dest="~/Library/Fonts/Humor-Sans.ttf", mode="wb")
font.add("xkcd", regular = "xkcd.ttf")
font.add("Humor Sans", regular = "Humor-Sans.ttf")
xrange <- range(mtcars$mpg)
yrange <- range(mtcars$wt)
set.seed(123) # for reproducibility
p <- ggplot() + geom_point(aes(mpg, wt), data=mtcars) + xkcdaxis(xrange,yrange)
p
library(xkcd)
xrange <- range(mtcars$wt)
yrange <- range(mtcars$mpg)
p1 <- ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(shape=20) +                                                  # use solid circles
xkcdaxis(xrange,yrange) +                                           # plot the xkcd-styled axis
xlab("weight in thoushands of pounds") +                # label the x-axis
ylab("miles per gallon")                                                # label the y-axis
print(p1)
library(xkcd)
xrange <- range(mtcars$wt)
yrange <- range(mtcars$mpg)
p1 <- ggplot(data=mtcars, aes(x=wt, y=mpg)) +
geom_point(shape=20) +                                                  # use solid circles
xkcdaxis(xrange,yrange) +                                           # plot the xkcd-styled axis
xlab("weight in thoushands of pounds") +                # label the x-axis
ylab("miles per gallon")                                                # label the y-axis
print(p1)
fonts()
AQ = read.table(x, "clipboard", sep="\t", row.names=FALSE, col.names=FALSE)
read.table(AQ, "clipboard", sep="\t", row.names=FALSE, col.names=FALSE)
AQ = read.table("clipboard", sep="\t", row.names=FALSE, col.names=FALSE)
AQ <- read.delim("clipboard")
AQ <- read.delim("clipboard")
install.packages('LSAfun')
libary(LSAfun)
library(LSAfun)
x = read.table("clipboard",header = FALSE)
x = read.table("clipboard",header = FALSE)
x = read.delim("clipboard")
x = read.delim(pipe("pbpaste"))
View(x)
x = read.delim(pipe("pbpaste"),header=FALSE)
names(x)=c('dDMN','Hypothalamus','MidBrain','OFC','Amygdala','Salience','SubcortThreat')
View(x)
library(corrplot)
install.packages('corrplot')
library(corrplot)
corrplot(x, order="AOE", method="circle", tl.pos="lt", type="upper",
tl.col="black", tl.cex=0.6, tl.srt=45,
addCoef.col="black", addCoefasPercent = TRUE,
p.mat = 1-abs(x), sig.level=0.50, insig = "blank")
corrplot(x, order="AOE", method="circle", tl.pos="lt", type="upper",
tl.col="black", tl.cex=0.6, tl.srt=45,
addCoef.col="black", addCoefasPercent = TRUE,
p.mat = 1-abs(x))
jnk=runif(1000)
jnk=(jnk*100)+c(1:500, 500:1)
jnk=matrix(jnk,nrow=100,ncol=10)
jnk=as.data.frame(jnk)
names(jnk)=c("var1", "var2","var3","var4","var5","var6","var7","var8","var9","var10")
cor_jnk=cor(jnk, use="complete.obs")
View(cor_jnk)
upper_tri <- get_upper_tri(x)
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(x)
View(upper_tri)
# Melt the correlation matrix
library(reshape2)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
View(melted_cormat)
View(melted_cormat)
library(ggplot2)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pairwise Uncorrected\n P-Value") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
View(melted_cormat)
row.names(x)=c('dDMN','Hypothalamus','MidBrain','OFC','Amygdala','Salience','SubcortThreat')
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(x)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
View(upper_tri)
View(melted_cormat)
corrplot(x)
View(x)
heatmap(x)
y = as.matrix(x)
View(y)
heatmap(y)
y = as.matrix(upper_tri)
heatmap(y)
View(upper_tri)
save.image("~/Dropbox/PhD/Study_15_Testosterone/pvalues.RData")
load("~/Dropbox/PhD/Study_15_Testosterone/pvalues.RData")
View(upper_tri)
View(y)
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:10),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
library(tidyverse)
install.packages('tidyverse')
library(tidyverse)
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:10),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
View(dat2)
dat2 <- x %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:10),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:10),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
nameY=c('dDMN','Hypothalamus','MidBrain','OFC','Amygdala','Salience','SubcortThreat')
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(nameY, levels=1:10),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(nameY, levels=1:7),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(nameY, levels=1:49),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(nameY),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(nameY, levels=1),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:10),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
ggplot(dat2, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient(low = "white", high = "red")
library(gplots)
heatmap.2(x,dendrogram = "none")
heatmap.2(y,dendrogram = "none")
heatmap.2(y,dendrogram = "none", Rowv = FALSE, Colv = FALSE)
heatmap.2(y,dendrogram = "none", Rowv = FALSE, Colv = FALSE, cellnote = y)
heatmap.2(y,dendrogram = "none", Rowv = FALSE, Colv = FALSE, cellnote = y, notecol = "black")
z = round(y,3)
View(z)
heatmap.2(z,dendrogram = "none", Rowv = FALSE, Colv = FALSE, cellnote = y, notecol = "black", trace = 'none')
heatmap.2(z,dendrogram = "none", Rowv = FALSE, Colv = FALSE, cellnote = z, notecol = "black", trace = 'none')
heatmap.2(z,dendrogram = "none", Rowv = FALSE, Colv = FALSE, cellnote = z, notecol = "black", trace = 'none', key = F)
heatmap.2(z,dendrogram = "none", Rowv = FALSE, Colv = FALSE, cellnote = z, notecol = "black", trace = 'none')
heatmap.2(z,dendrogram = "none", Rowv = FALSE, Colv = FALSE, cellnote = z, notecol = "black", trace = 'none', density.info = 'none')
install.packages('circlize')
set.seed(999)
mat = matrix(sample(18, 18), 3, 6)
rownames(mat) = paste0("S", 1:3)
colnames(mat) = paste0("E", 1:6)
chordDiagram(mat)
library(circlize)
chordDiagram(mat)
x = read.delim(pipe("pbpaste"))
y = as.matrix(x)
x = read.delim(pipe("pbpaste"))
y = as.matrix(x)
EEGNames = (  'Fp1' 'AF7' 'AF3' 'F1')
EEGNames = ('Fp1' 'AF7' 'AF3' 'F1')
EEGNames = ('Fp1','AF7','AF3','F1')
EEGNames = c('Fp1' 'AF7' 'AF3' 'F1')
EEGNames = c('Fp1','AF7','AF3','F1')
x = read.delim(pipe("pbpaste"))
y = as.matrix(x)
View(y)
View(x)
x = read.delim(pipe("pbpaste"),header=FALSE)
y = as.matrix(x)
EEGNames = c('Fp1','AF7','AF3','F1','F3','F5','F7','FT7','FC5','FC3','FC1','C1',
'C3','C5','T7','TP7','CP5','CP3','CP1','P1','P3','P5','P7','P9','PO7',
'PO3','O1','Iz','Oz','POz','Pz','CPz','Fpz','Fp2','AF8','AF4','AFz','Fz',
'F2','F4','F6','F8','FT8','FC6','FC4','FC2','FCz','Cz','C2','C4','C6',
'T8','TP8','CP6','CP4','CP2','P2','P4','P6','P8','P10','PO8','PO4','O2')
chordDiagram(x)
rownames(x) = EEGNames
colnames(x) = EEGNames
View(x)
x = as.matrix(x)
rownames(x) = EEGNames
colnames(x) = EEGNames
chordDiagram(x)
chordDiagram(x, col = x)
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
posx = read.delim(pipe("pbpaste"),header=FALSE)
posx = as.matrix(posx)
chordDiagram(adj, col = posx)
View(posx)
posx = read.delim(pipe("pbpaste"),header=FALSE)
posx = as.matrix(posx)
rownames(adj) = EEGNames
colnames(adj) = EEGNames
chordDiagram(adj, col = posx)
col_mat = rand_color(length(adj), transparency = 0.5)
head(col_mat)
chordDiagram(adj, col = col_mat)
col_mat = rand_color(length(posx), transparency = 0.5)
chordDiagram(adj, col = col_mat)
library(circlize)
?colorRamp2
col_fun = colorRamp2(c(-1, 0, 1), c("green", "black", "red"))
col_fun(seq(-2, 2, by = 0.5))
View(col_fun)
col_fun = colorRamp2(c(log10(0.0001), log10(0.05), log10(1)), c("green", "white", "red"))
col_fun(log10(c(0.000001, 0.0012, 0.012, 0.2)))
space = c("RGB", "HSV", "LAB", "XYZ", "sRGB", "LUV")
par(xpd = NA)
plot(NULL, xlim = c(-1, 1), ylim = c(0, length(space)+1), type = "n")
for(i in seq_along(space)) {
f = colorRamp2(c(-1, 0, 1), c("green", "black", "red"), space = space[i])
x = seq(-1, 1, length = 200)
rect(x-1/200, i-0.5, x+1/200, i+0.5, col = f(x), border = NA)
text(1, i, space[i], adj = c(-0.2, 0.5))
}
par(xpd = FALSE)
?chordDiagram
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
col_mat = colorRamp2(adj)
library(circlize)
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
?colorRamp2
col_mat = colorRamp2([1:10],adj,transparency = 0,space="LAB")
col_mat = colorRamp2(1:10,adj,transparency = 0,space="LAB")
col_mat = colorRamp2(adj,adj,transparency = 0,space="LAB")
View(col_mat)
View(col_mat)
col_mat = colorRamp2(1:10,1:10,transparency = 0,space="LAB")
col_fun = colorRamp2(1:10,1:10,transparency = 0,space="LAB")
col_mat = col_fun(adj)
View(adj)
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
col_mat = col_fun(adj)
chordDiagram(adj,col = col_mat)
EEGNames = c('Fp1','AF7','AF3','F1','F3','F5','F7','FT7','FC5','FC3','FC1','C1',
'C3','C5','T7','TP7','CP5','CP3','CP1','P1','P3','P5','P7','P9','PO7',
'PO3','O1','Iz','Oz','POz','Pz','CPz','Fpz','Fp2','AF8','AF4','AFz','Fz',
'F2','F4','F6','F8','FT8','FC6','FC4','FC2','FCz','Cz','C2','C4','C6',
'T8','TP8','CP6','CP4','CP2','P2','P4','P6','P8','P10','PO8','PO4','O2')
rownames(adj) = EEGNames
colnames(adj) = EEGNames
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
rownames(adj) = EEGNames
colnames(adj) = EEGNames
col_mat = col_fun(adj)
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
EEGNames = c('Fp1','AF7','AF3','F1','F3','F5','F7','FT7','FC5','FC3','FC1','C1',
'C3','C5','T7','TP7','CP5','CP3','CP1','P1','P3','P5','P7','P9','PO7',
'PO3','O1','Iz','Oz','POz','Pz','CPz','Fpz','Fp2','AF8','AF4','AFz','Fz',
'F2','F4','F6','F8','FT8','FC6','FC4','FC2','FCz','Cz','C2','C4','C6',
'T8','TP8','CP6','CP4','CP2','P2','P4','P6','P8','P10','PO8','PO4','O2')
rownames(adj) = EEGNames
colnames(adj) = EEGNames
col_mat = col_fun(adj)
chordDiagram(adj,col = col_mat, symmetric = TRUE)
chordDiagram(adj,col = col_mat)
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
rownames(adj) = EEGNames
colnames(adj) = EEGNames
col_fun = colorRamp2(1:10,1:10,transparency = 0,space="LAB")
col_mat = col_fun(adj)
chordDiagram(adj, col = col_mat)
chordDiagram(adj,col = col_mat, symmetric = TRUE)
View(col_mat)
View(col_mat)
0:1:10
0:0.1:1
0:1:0.1
break = seq(from = 0, to = 1, by = 0.01)
breaks = seq(from = 0, to = 1, by = 0.01)
col_fun = colorRamp2(breaks,breaks,transparency = 0,space="LAB")
breaks = seq(from = 0.1, to = 1, by = 0.01)
col_fun = colorRamp2(breaks,breaks,transparency = 0,space="LAB")
col_mat = col_fun(adj)
View(col_mat)
View(col_mat)
View(adj)
col_fun = colorRamp2(breaks,breaks,transparency = 0,space="LAB")
col_fun = colorRamp2(c(-1, 0, 1), c("green", "black", "red"))
col_mat = col_fun(adj)
View(col_mat)
chordDiagram(adj, col = col_mat, symmetric = TRUE)
library(circlize)
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
adj = read.delim(pipe("pbpaste"),header=FALSE)
library(circlize)
cor_mat = read.delim(pipe("pbpaste"),header=FALSE)
cor_mat = as.matrix(cor_mat)
EEGNames = c('Fp1','AF7','AF3','F1','F3','F5','F7','FT7','FC5','FC3','FC1','C1',
'C3','C5','T7','TP7','CP5','CP3','CP1','P1','P3','P5','P7','P9','PO7',
'PO3','O1','Iz','Oz','POz','Pz','CPz','Fpz','Fp2','AF8','AF4','AFz','Fz',
'F2','F4','F6','F8','FT8','FC6','FC4','FC2','FCz','Cz','C2','C4','C6',
'T8','TP8','CP6','CP4','CP2','P2','P4','P6','P8','P10','PO8','PO4','O2')
rownames(cor_mat) = EEGNames
colnames(cor_mat) = EEGNames
col_fun = colorRamp2(c(-1, 0, 1), c("darkgreen", "white", "red"))
chordDiagram(cor_mat, col = col_fun(cor_mat), symmetric = TRUE)
col_mat = col_fun(cor_mat)
col_mat[abs(cor_mat) < 0.2] = "#00000000"
chordDiagram(cor_mat, col = col_mat, symmetric = TRUE)
col_mat = col_fun(cor_mat)
col_mat[abs(cor_mat) < 0.4] = "#00000000"
chordDiagram(cor_mat, col = col_mat, symmetric = TRUE)
col_mat = col_fun(cor_mat)
col_mat[abs(cor_mat) < 0.4] = "#00000000"
chordDiagram(cor_mat, col = col_mat, symmetric = TRUE)
View(cor_mat)
col_mat = col_fun(cor_mat)
col_mat[abs(cor_mat) < 0.5] = "#00000000"
chordDiagram(cor_mat, col = col_mat, symmetric = TRUE)
install.packages('brainGraph')
library('brainGraph')
install.packages('RGtk2')
data("dk")
install.packages('brainGraph')
install.packages('RGtk2')
install.packages("RGtk2", depen=T, type="source")
install.packages("RGtk2", depen=T, type="source")
setRepositories()
install.packages("rticles", type = "source")
library(rticles)
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
library(igraph)
measures = read.csv("./Input/Measures.csv")
measures
library(gplots)
library(ggplot2)
library(corrplot)
install.packages("bootnet")
install.packages("qgraph")
install.packages("lavaan")
library(bootnet)
library(bootnet)
library(qgraph)
help("bootnet")
library(bootnet)
library(qgraph)
library(bootnet)
library(qgraph)
install.packages("skimr")
devtools::install_github("hadley/colformat")
devtools::install_github("ropenscilabs/skimr")
load("~/Dropbox/Research/Ideas/Symptomics/_old_sfari.RData")
library(skimr)
skim(df)
a <- skim(df)
View(a)
library(lavaan)
install.packages(easypackages)
library(easypackages) # then we can do the rest in one go
install.packages('easypackages')
install.packages("easypackages")
library(easypackages) # then we can do the rest in one go
list.of.packages <- c("Hmisc","ggplot2","gplots","ggthemes","viridis","reshape2")
libraries(list.of.packages)
list.of.packages <- c("Hmisc","ggplot2","gplots","ggthemes","viridis","reshape2")
installed.packages()[,"Package"]
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
length(new.packages)
install.packages('proxy')
install.packages("installr")
library(pwr)
install.packages("pwr")
library(igraph)
df <- read.table(file = "~/Downloads/facebook_combined.txt",header = FALSE)
df <- df+1
gdf <- graph_from_edgelist(as.matrix(df))
deg <- degree(gdf)
sum(deg>200)
gdf2 <- delete.vertices(gdf,which(degree(gdf)<200))
wc <- cluster_walktrap(gdf2)
members <- membership(wc)
library(networkD3)
d3 <- igraph_to_networkD3(gdf2, group = members)
forceNetwork(Links = d3$links, Nodes = d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group')
forceNetwork(Links = d3$links, Nodes = d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group',
zoom = TRUE)
library(magrittr)
simpleNetwork(d3)
forceNetwork(Links = d3$links, Nodes = d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group',
zoom = TRUE) %>%
saveNetwork(file = 'Net1.html')
load("~/Dropbox/Research/Projects/Macaque/Data/nhp_PrePost_StartingData.RData")
View(samplePrePost)
unique(samplePrePost$age)
unique(samplePrePost$age_log2pcd)
View(probes)
#install.packages('easypackages')
rm(list = ls()) # clear the workspace
library(easypackages) # then we can do the rest in one go
# get a list of all potentially useful packages
list.of.packages <- c("Hmisc","ggplot2","caret","gplots","Rmisc","dplyr",
"MatchIt","optmatch","data.table","plotrix","ggthemes",
"viridis","coin","plyr","psytabs","RColorBrewer",
"msir","lmtest", "ggpubr","stats", "reshape2","xtable",
"ez","apa","parallel", "jmuOutlier","Rtsne","fpc", "cluster",
"RCurl","plyr","nlme")
# check if they are already installed and otherwise install them
# note: this doesn't work for biocLite tools
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)>0) { install.packages(new.packages)}
# then load them all
libraries(list.of.packages)
rm(list.of.packages, new.packages)
setwd("~/Dropbox/Research/Projects/MSN_ABIDE/Public/Normative_modeling")
source("./Scripts/variancePart.R")
source("./Scripts/1_MergingData.R")
source("./Scripts/2_localRegression.R")
source("./Scripts/3_Stats.R")
source("./Scripts/4_SymptomCorrelations.R")
basicStats(measure = "CT", parcellation = "500aparc")
source("./Scripts/variancePart.R")
source("./Scripts/1_MergingData.R")
source("./Scripts/2_localRegression.R")
source("./Scripts/3_Stats.R")
source("./Scripts/4_SymptomCorrelations.R")
basicStats(measure = "CT", parcellation = "500aparc")
source("./Scripts/variancePart.R")
source("./Scripts/1_MergingData.R")
source("./Scripts/2_localRegression.R")
source("./Scripts/3_Stats.R")
source("./Scripts/4_SymptomCorrelations.R")
basicStats(measure = "CT", parcellation = "500aparc")
symptomCorrelation(measure = "CT", parcellation = "500aparc")
